name: "Create AWS Resources Sequentially"

# Trigger the workflow manually from GitHub UI
on:
  workflow_dispatch:

# Global environment variables used across all jobs
env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TERRAFORM_VERSION: "1.2.5"
  # Directories for Terraform configurations
  S3_CREATE_DIR: "./backend-deploy"
  # S3_CREATE_CLOUDWATCH_DIR: "./environments/stage/s3-create-cloudwatch"
  WEB_APP_DIR: "./"
  # CLOUDWATCH_MONITOR_DIR: "./environments/stage/cloudwatch-monitor"
  # Backend configuration
  TF_BACKEND_BUCKET: ${{ secrets.TF_BACKEND_BUCKET }}
  TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
  TF_BACKEND_REGION: ${{ secrets.TF_BACKEND_REGION }}
  TF_BACKEND_DYNAMODB_TABLE: ${{ secrets.TF_BACKEND_DYNAMODB_TABLE }}

jobs:
  # Setup job to initialize common settings for Terraform
  setup:
    name: Setup Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3 # Checks out the repository code to the runner

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # Sets up specified Terraform version
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Cache Terraform Plugins
        uses: actions/cache@v2 # Caches downloaded Terraform plugins for faster subsequent runs
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

  # Job to create the backend (S3,Dynamo)
  create_s3_bucket:
    name: Create S3 Bucket
    needs: setup
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ${{ env.S3_CREATE_DIR }}
    steps:
      - uses: actions/checkout@v3
      - name: Initialize and Apply Terraform Configuration for S3 Bucket
        run: |
          terraform init
          terraform apply -auto-approve -input=false
        working-directory: ${{ env.WORKING_DIRECTORY }}

  # Additional jobs follow the same pattern, with each depending on the success of the previous job

  # # Job for creating an S3 bucket specifically for CloudWatch monitoring
  # create_s3_bucket_cloudwatch:
  #   name: Create S3 Bucket for CloudWatch Monitoring
  #   needs: create_s3_bucket
  #   runs-on: ubuntu-latest
  #   env:
  #     WORKING_DIRECTORY: ${{ env.S3_CREATE_CLOUDWATCH_DIR }}
  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Initialize and Apply Terraform Configuration for S3 CloudWatch Bucket
  #       run: |
  #         terraform init
  #         terraform apply -auto-approve -input=false
  #       working-directory: ${{ env.WORKING_DIRECTORY }}

  # Job for creating an EC2 instance
  create_ec2_instance:
    name: Create EC2 Instance
    needs: create_s3_bucket
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: ${{ env.WEB_APP_DIR }}
    steps:
      - uses: actions/checkout@v3
      - name: Initialize and Apply Terraform Configuration for EC2 Instance
        run: |
          terraform init \
          -backend-config="bucket=${{ env.TF_BACKEND_BUCKET }}" \
          -backend-config="key=${{ env.TF_BACKEND_KEY }}" \
          -backend-config="region=${{ env.TF_BACKEND_REGION }}" \
          -backend-config="dynamodb_table=${{ env.TF_BACKEND_DYNAMODB_TABLE }}" \
          -backend-config="encrypt=true"
          terraform apply -auto-approve -input=false
        working-directory: ${{ env.WORKING_DIRECTORY }}
