name: "Destroy Resources"

on:
  workflow_dispatch: # Allows manual trigger from GitHub UI

jobs:
  # Job for setting up and validating Terraform configuration for CloudWatch
  setup_and_validate_cloudwatch:
    name: 'Setup and Validate Terraform for CloudWatch'
    runs-on: ubuntu-latest # Specifies the runner environment
    outputs:
      AWS_REGION: ${{ secrets.AWS_REGION }} # Outputs AWS region for use in subsequent jobs
    steps:
      - name: Checkout
        uses: actions/checkout@v3 # Checks out the repository content to the runner

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2 # Sets up Terraform CLI on the runner
        with:
          terraform_version: 1.2.5 # Uses Terraform version 1.2.5 directly
          terraform_wrapper: false # Disables the wrapper script

      # Caches Terraform plugins to speed up Terraform init commands
      - name: Cache Terraform Plugins
        uses: actions/cache@v2
        with:
          path: |
            ~/.terraform.d/plugin-cache
          key: ${{ runner.os }}-terraform-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-

      # Checks the format of Terraform files
      - name: Terraform Format (CloudWatch)
        run: terraform fmt -check
        working-directory: ./environments/stage/cloudwatch-monitor

      # Initializes Terraform in the specified directory
      - name: Terraform Init (CloudWatch)
        run: terraform init
        working-directory: ./environments/stage/cloudwatch-monitor

      # Validates the Terraform configuration
      - name: Terraform Validate (CloudWatch)
        run: terraform validate -no-color
        working-directory: ./environments/stage/cloudwatch-monitor

      # Exits the job if validation fails
      - name: Terraform validate Status (CloudWatch)
        if: ${{ failure() }}
        run: exit 1

  # Job for destroying CloudWatch metrics
  terraform_destroy_cloudwatch:
    name: 'Terraform Destroy CloudWatch Metrics'
    needs: setup_and_validate_cloudwatch # Depends on the successful completion of the setup_and_validate_cloudwatch job
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ needs.setup_and_validate_cloudwatch.outputs.AWS_REGION }}
    steps:
      # Destroys Terraform-managed CloudWatch metrics
      - name: Terraform Destroy (CloudWatch)
        run: terraform destroy -auto-approve
        working-directory: ./environments/stage/cloudwatch-monitor

  # Job for setting up and validating Terraform configuration for EC2
  setup_and_validate_ec2:
    name: 'Setup and Validate Terraform for EC2'
    needs: terraform_destroy_cloudwatch # Ensures CloudWatch metrics are destroyed before proceeding
    runs-on: ubuntu-latest
    steps:
      # Reuses the checkout from the previous job to check the format and validate Terraform configuration for EC2
      - name: Terraform Format (EC2)
        run: terraform fmt -check
        working-directory: ./environments/stage/web_app

      - name: Terraform Init (EC2)
        run: terraform init
        working-directory: ./environments/stage/web_app

      - name: Terraform Validate (EC2)
        run: terraform validate -no-color
        working-directory: ./environments/stage/web_app

      # Exits the job if validation fails
      - name: Terraform validate Status (EC2)
        if: ${{ failure() }}
        run: exit 1

  # Job for destroying EC2 instances
  terraform_destroy_ec2:
    name: 'Terraform Destroy EC2 Instance'
    needs: setup_and_validate_ec2 # Depends on the successful completion of the setup_and_validate_ec2 job
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
    steps:
      # Destroys Terraform-managed EC2 instances
      - name: Terraform Destroy (EC2)
        run: terraform destroy -auto-approve
        working-directory: ./environments/stage/web_app
